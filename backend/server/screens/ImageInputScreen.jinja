<BaseScreen title="Huey's eink screen">
  <div class="max-w-(--breakpoint-md) mx-auto pb-8">
    <Header />

    <Canvas />

    <div class="flex flex-col items-start py-6 gap-4">
      <label class="w-full">
        <span class="block text-lg font-bold">Image</span>
        <input class="
            w-full block
            py-2
            file:mr-4 
            file:py-2 
            file:px-4 
            file:border-0
            file:bg-indigo-50 
            file:text-indigo-700 
            hover:file:bg-indigo-100 
            cursor-pointer" type="file" id="input_image" accept="image/*" hx-trigger="changed" hx-on:input="updatePreview();" />
      </label>
      <label class="w-full">
        <span class="block text-lg font-bold">Image sizing</span>
        <select class="bg-indigo-50 text-indigo-700 px-4 py-2 mt-2 hover:bg-indigo-100 cursor-pointer" id="image_sizing" hx-trigger="changed"
          hx-on:change="updatePreview();">
          <option value="auto">Auto</option>
          <option value="full_width">Full Width</option>
          <option value="full_height">Full Height</option>
        </select>
      </label>
      <label class="w-full">
        <span class="block text-lg font-bold">Image rotation</span>
        <select class="bg-indigo-50 text-indigo-700 px-4 py-2 mt-2 hover:bg-indigo-100 cursor-pointer" id="image_rotation" hx-trigger="changed"
          hx-on:change="updatePreview();">
          <option value="0">0째</option>
          <option value="90">90째 Clockwise</option>
          <option value="180">180째</option>
          <option value="270">270째 Clockwise</option>
        </select>
      </label>
      <label class="w-full">
        <span class="block text-lg font-bold">Image dithering</span>
        <select class="bg-indigo-50 text-indigo-700 px-4 py-2 mt-2 hover:bg-indigo-100 cursor-pointer" id="image_dithering" hx-trigger="changed"
          hx-on:change="updatePreview();">
          <option value="none">None</option>
          <option value="binary">Binary</option>
          <option value="ternary">Ternary</option>
          <option value="floydSteinberg">Floyd-Steinberg (B&W only)</option>
          <option value="floydSteinbergRed" selected>Floyd-Steinberg (B&W and red)</option>
        </select>
      </label>
    </div>

    <ActionButtons />
  </div>
  <script>
    const updatePreview = () => {
      const files = document.getElementById("input_image").files

      if (files === null || files.length == 0) {
        // no selection, ignore
        return
      }

      if (files.length > 1) {
        window.alert(`Using only the first file of the ${files.length} files selected`)
      }

      const image = new Image()
      image.src = URL.createObjectURL(files[0])

      const imageRotation = document.getElementById("image_rotation").value
      const imageSizing = document.getElementById("image_sizing").value
      const dithering = document.getElementById("image_dithering").value


      image.onload = () => {
        ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height)
        ctx.save()

        ctx.translate(ctx.canvas.width / 2, ctx.canvas.height / 2)
        const rotation = Number.parseInt(imageRotation, 10)
        ctx.rotate(rotation * Math.PI / 180)

        const widthHeightSwapped = rotation === 90 || rotation === 270
        const rotatedWidth = widthHeightSwapped ? image.height : image.width
        const rotatedHeight = widthHeightSwapped ? image.width : image.height

        let ratio = Math.min(ctx.canvas.width / rotatedWidth, ctx.canvas.height / rotatedHeight)

        switch (imageSizing) {
          case `full_height`: {
            ratio = ctx.canvas.height / rotatedHeight
            break
          }

          case 'full_width': {
            ratio = ctx.canvas.width / rotatedWidth
            break
          }

          default: {
            break
          }
        }

        const offsetX = Math.round((ctx.canvas.width - image.width * ratio) / 2) - ctx.canvas.width / 2
        const offsetY = Math.round((ctx.canvas.height - image.height * ratio) / 2) - ctx.canvas.height / 2

        ctx.drawImage(
          image,
          0,
          0,
          image.width,
          image.height,
          offsetX,
          offsetY,
          image.width * ratio,
          image.height * ratio
        )
        ctx.restore()

        const rawImageData = ctx.getImageData(0, 0, CANVAS_WIDTH, CANVAS_HEIGHT)
        const ditheredImageData = ditherImageData(rawImageData, dithering)
        ctx.putImageData(ditheredImageData, 0, 0)

        canvas.toBlob(blob => {
          const dataTransfer = new DataTransfer()
          const file = new File([blob], 'image.png', { type: blob.type })
          dataTransfer.items.add(file)

          const fileInput = document.getElementById("image_data")
          fileInput.files = dataTransfer.files
        }, "image/png")
      }
    }

    document.addEventListener("DOMContentLoaded", async () => {
      await loadInitialCanvas()
    })

    const configRequest = async (event, data) => {
      document.getElementById("input_image").value = null
      ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height)
    }

  </script>
</BaseScreen>